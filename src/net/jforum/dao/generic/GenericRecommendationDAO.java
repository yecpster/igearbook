/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * This file creation date: Mar 28, 2003 / 22:57:43 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Recommendation;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

import com.google.common.collect.Lists;
import com.igearbook.entities.PaginationData;
import com.igearbook.entities.PaginationParams;

public class GenericRecommendationDAO extends AutoKeys implements net.jforum.dao.RecommendationDAO {

    @Override
    public int addNew(Recommendation topic) {
        try {
            PreparedStatement p = null;
            try {
                p = this.getStatementForAutoKeys("RecommendModel.addNew");

                p.setInt(1, topic.getType());
                p.setString(2, topic.getImageUrl());
                p.setInt(3, topic.getTopicId());
                p.setString(4, topic.getTitle());
                p.setString(5, topic.getDesc());
                p.setInt(6, topic.getCreateBy().getId());
                p.setInt(7, topic.getLastUpdateBy().getId());
                p.setTimestamp(8, new Timestamp(topic.getCreateTime().getTime()));

                this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("RecommendModel.lastGeneratedPostId"));
                int topicId = this.executeAutoKeysQuery(p);
                topic.setId(topicId);
            } catch (SQLException e) {
                throw new DatabaseException(e);
            } finally {
                DbUtils.close(p);
            }

            return topic.getId();
        } catch (Exception e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public void update(Recommendation topic) {
        try {
            PreparedStatement p = null;
            try {
                p = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RecommendModel.update"));

                p.setString(1, topic.getImageUrl());
                p.setString(2, topic.getTitle());
                p.setString(3, topic.getDesc());
                p.setInt(4, topic.getLastUpdateBy().getId());
                p.setTimestamp(5, new Timestamp(topic.getLastUpdateTime().getTime()));
                p.setInt(6, topic.getId());

                p.executeUpdate();
            } catch (SQLException e) {
                throw new DatabaseException(e);
            } finally {
                DbUtils.close(p);
            }

        } catch (Exception e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public List<Recommendation> selectByTypeByLimit(int type, int startFrom, int count) {
        List<Recommendation> l = Lists.newArrayList();

        String sql = SystemGlobals.getSql("RecommendModel.selectByTypeByLimit");

        PreparedStatement p = null;
        ResultSet rs = null;

        try {
            p = JForumExecutionContext.getConnection().prepareStatement(sql);
            p.setInt(1, type);
            p.setInt(2, startFrom);
            p.setInt(3, count);

            rs = p.executeQuery();
            Recommendation topic = null;
            UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
            while (rs.next()) {
                topic = new Recommendation();
                topic.setId(rs.getInt("recommend_id"));
                topic.setType(rs.getInt("recommend_type"));
                topic.setImageUrl(rs.getString("image_url"));
                topic.setTopicId(rs.getInt("topic_id"));
                topic.setTitle(rs.getString("topic_title"));
                topic.setDesc(rs.getString("topic_desc"));
                topic.setCreateBy(userDao.selectById(rs.getInt("create_user_id")));
                topic.setLastUpdateBy(userDao.selectById(rs.getInt("last_update_user_id")));
                topic.setCreateTime(new Date(rs.getTimestamp("create_time").getTime()));
                topic.setLastUpdateTime(new Date(rs.getTimestamp("last_update_time").getTime()));
                l.add(topic);
            }
            return l;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }
    }

    @Override
    public Recommendation selectByTopicId(int topicId) {
        String sql = SystemGlobals.getSql("RecommendModel.selectByTopicId");

        PreparedStatement p = null;
        ResultSet rs = null;
        try {
            p = JForumExecutionContext.getConnection().prepareStatement(sql);
            p.setInt(1, topicId);

            rs = p.executeQuery();
            Recommendation topic = null;
            UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
            if (rs.next()) {
                topic = new Recommendation();
                topic.setId(rs.getInt("recommend_id"));
                topic.setType(rs.getInt("recommend_type"));
                topic.setImageUrl(rs.getString("image_url"));
                topic.setTopicId(rs.getInt("topic_id"));
                topic.setTitle(rs.getString("topic_title"));
                topic.setDesc(rs.getString("topic_desc"));
                topic.setCreateBy(userDao.selectById(rs.getInt("create_user_id")));
                topic.setLastUpdateBy(userDao.selectById(rs.getInt("last_update_user_id")));
                topic.setCreateTime(new Date(rs.getTimestamp("create_time").getTime()));
                topic.setLastUpdateTime(new Date(rs.getTimestamp("last_update_time").getTime()));
            }
            return topic;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }
    }

    @Override
    public Recommendation selectById(int id) {
        String sql = SystemGlobals.getSql("RecommendModel.selectById");

        PreparedStatement p = null;
        ResultSet rs = null;
        try {
            p = JForumExecutionContext.getConnection().prepareStatement(sql);
            p.setInt(1, id);

            rs = p.executeQuery();
            Recommendation topic = null;
            UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
            if (rs.next()) {
                topic = new Recommendation();
                topic.setId(rs.getInt("recommend_id"));
                topic.setType(rs.getInt("recommend_type"));
                topic.setImageUrl(rs.getString("image_url"));
                topic.setTopicId(rs.getInt("topic_id"));
                topic.setTitle(rs.getString("topic_title"));
                topic.setDesc(rs.getString("topic_desc"));
                topic.setCreateBy(userDao.selectById(rs.getInt("create_user_id")));
                topic.setLastUpdateBy(userDao.selectById(rs.getInt("last_update_user_id")));
                topic.setCreateTime(new Date(rs.getTimestamp("create_time").getTime()));
                topic.setLastUpdateTime(new Date(rs.getTimestamp("last_update_time").getTime()));
            }
            return topic;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }
    }

    @Override
    public void delete(int id) {
        PreparedStatement p = null;
        try {
            p = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RecommendModel.delete"));
            p.setInt(1, id);
            p.executeUpdate();

        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

    @Override
    public PaginationData<Recommendation> selectAllByLimit(PaginationParams params) {
        String sql = SystemGlobals.getSql("RecommendModel.selectAllByLimit");
        PaginationData<Recommendation> data = DbUtils.preparePagination(sql, params);

        List<Recommendation> list = Lists.newArrayList();
        PreparedStatement p = null;
        ResultSet rs = null;
        try {
            p = JForumExecutionContext.getConnection().prepareStatement(sql);
            p.setInt(1, params.getStart());
            p.setInt(2, params.getRecordsPerPage());

            rs = p.executeQuery();
            Recommendation topic = null;
            UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
            while (rs.next()) {
                topic = new Recommendation();
                topic.setId(rs.getInt("recommend_id"));
                topic.setType(rs.getInt("recommend_type"));
                topic.setImageUrl(rs.getString("image_url"));
                topic.setTopicId(rs.getInt("topic_id"));
                topic.setTitle(rs.getString("topic_title"));
                topic.setDesc(rs.getString("topic_desc"));
                topic.setCreateBy(userDao.selectById(rs.getInt("create_user_id")));
                topic.setLastUpdateBy(userDao.selectById(rs.getInt("last_update_user_id")));
                topic.setCreateTime(new Date(rs.getTimestamp("create_time").getTime()));
                topic.setLastUpdateTime(new Date(rs.getTimestamp("last_update_time").getTime()));
                list.add(topic);
            }
            data.setList(list);
            return data;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }
    }
}
